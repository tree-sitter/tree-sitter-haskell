(haskell [0, 0] - [5, 0]
  declarations: (declarations [0, 0] - [5, 0]
    (bind [0, 0] - [4, 10]
      name: (variable [0, 0] - [0, 1])
      match: (match [0, 2] - [4, 10]
        expression: (case [0, 4] - [4, 10]
          (variable [0, 9] - [0, 10])
          (cpp [1, 0] - [1, 3])
          alternatives: (alternatives [2, 4] - [4, 10]
            alternative: (alternative [2, 4] - [2, 10]
              pattern: (variable [2, 4] - [2, 5])
              match: (match [2, 6] - [2, 10]
                expression: (variable [2, 9] - [2, 10])))
            (cpp [3, 0] - [3, 6])
            alternative: (alternative [4, 4] - [4, 10]
              pattern: (variable [4, 4] - [4, 5])
              match: (match [4, 6] - [4, 10]
                expression: (variable [4, 9] - [4, 10])))))))))
