(haskell [0, 0] - [20, 0]
  declarations: (declarations [0, 0] - [20, 0]
    (bind [0, 0] - [0, 10]
      name: (variable [0, 0] - [0, 1])
      match: (match [0, 2] - [0, 10]
        expression: (infix [0, 4] - [0, 10]
          left_operand: (variable [0, 4] - [0, 5])
          operator: (operator [0, 6] - [0, 8])
          right_operand: (variable [0, 9] - [0, 10]))))
    (bind [2, 0] - [3, 6]
      name: (variable [2, 0] - [2, 1])
      match: (match [2, 2] - [3, 6]
        expression: (infix [2, 4] - [3, 6]
          left_operand: (variable [2, 4] - [2, 5])
          operator: (operator [3, 2] - [3, 4])
          right_operand: (variable [3, 5] - [3, 6]))))
    (comment [5, 0] - [10, 86])
    (bind [11, 0] - [13, 6]
      name: (variable [11, 0] - [11, 1])
      match: (match [11, 2] - [13, 6]
        expression: (infix [11, 4] - [13, 6]
          left_operand: (do [11, 4] - [13, 2]
            statement: (exp [12, 2] - [12, 3]
              (variable [12, 2] - [12, 3])))
          operator: (operator [13, 2] - [13, 4])
          right_operand: (variable [13, 5] - [13, 6]))))
    (bind [15, 0] - [16, 3]
      name: (variable [15, 0] - [15, 1])
      match: (match [15, 2] - [16, 3]
        expression: (left_section [15, 4] - [16, 3]
          left_operand: (variable [15, 5] - [15, 6])
          operator: (operator [15, 7] - [15, 9]))))
    (bind [18, 0] - [19, 4]
      name: (variable [18, 0] - [18, 1])
      match: (match [18, 2] - [19, 4]
        expression: (parens [18, 4] - [19, 4]
          expression: (infix [18, 5] - [19, 3]
            left_operand: (variable [18, 5] - [18, 6])
            operator: (operator [18, 7] - [18, 9])
            right_operand: (variable [19, 2] - [19, 3])))))))
