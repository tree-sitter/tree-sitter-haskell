(haskell [0, 0] - [11, 0]
  declarations: (declarations [0, 0] - [11, 0]
    (bind [0, 0] - [4, 12]
      name: (variable [0, 0] - [0, 1])
      match: (match [0, 2] - [4, 12]
        expression: (do [0, 4] - [4, 12]
          statement: (exp [1, 2] - [4, 12]
            (case [1, 2] - [4, 12]
              (variable [1, 7] - [1, 8])
              alternatives: (alternatives [2, 4] - [4, 12]
                alternative: (alternative [2, 4] - [4, 12]
                  pattern: (variable [2, 4] - [2, 5])
                  match: (match [2, 6] - [4, 12]
                    expression: (do [2, 9] - [4, 12]
                      statement: (bind [3, 6] - [3, 12]
                        pattern: (variable [3, 6] - [3, 7])
                        expression: (variable [3, 11] - [3, 12]))
                      statement: (exp [4, 6] - [4, 12]
                        (apply [4, 6] - [4, 12]
                          function: (variable [4, 6] - [4, 10])
                          argument: (variable [4, 11] - [4, 12]))))))))))))
    (comment [6, 0] - [6, 4])
    (bind [7, 0] - [7, 5]
      name: (variable [7, 0] - [7, 1])
      match: (match [7, 2] - [7, 5]
        expression: (variable [7, 4] - [7, 5])))
    (comment [9, 0] - [9, 4])
    (bind [10, 0] - [10, 5]
      name: (variable [10, 0] - [10, 1])
      match: (match [10, 2] - [10, 5]
        expression: (variable [10, 4] - [10, 5])))))
