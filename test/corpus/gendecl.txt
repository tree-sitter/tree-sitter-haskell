=========================================
gendecl: basic
=========================================

a :: a -> A -> A a

---

(module
 (decl_sig
  name: (variable)
  (annotation)
  type: (fun
   (type_name (type_variable))
   (fun
    (type_name (type))
    (type_apply (type_name (type)) (type_name (type_variable)))))))

=========================================
gendecl: forall
=========================================

a :: forall a (a :: * -> Type) . (∀ a . a -> a) -> A a

---

(module
 (decl_sig
  (variable)
  (annotation)
  (forall
   (quantifiers
    (type_variable)
    (annotated_tyvar (type_variable) (annotation) (fun (star) (type_name (type)))))
   (forall_dot)
   (fun
    (type_parens
     (forall
      (quantifiers (type_variable))
      (forall_dot)
      (fun (type_name (type_variable)) (type_name (type_variable)))))
    (type_apply (type_name (type)) (type_name (type_variable)))))))

=========================================
gendecl: multi context, multi line
=========================================
a ::
  A a a =>
  (A a, A a) =>
  (A => a a) ->
  A a ->
  a

---

(module
 (decl_sig
  (variable)
  (annotation)
  (context
   (constraint (class_name (type)) (type_name (type_variable)) (type_name (type_variable)))
   (carrow)
   (context
    (constraint (class_name (type)) (type_name (type_variable)))
    (comma)
    (constraint (class_name (type)) (type_name (type_variable)))
    (carrow)
    (fun
     (type_parens
      (context (constraint (class_name (type)))
      (carrow)
      (type_apply (type_name (type_variable)) (type_name (type_variable)))))
     (fun (type_apply (type_name (type)) (type_name (type_variable))) (type_name (type_variable))))))))

=========================================
gendecl: multi context, single line
=========================================

a :: A a a => (A a, A a) => a

---

(module
 (decl_sig
  (variable)
  (annotation)
  (context
   (constraint (class_name (type)) (type_name (type_variable)) (type_name (type_variable)))
   (carrow)
   (context
    (constraint (class_name (type)) (type_name (type_variable)))
    (comma)
    (constraint (class_name (type)) (type_name (type_variable)))
    (carrow)
    (type_name (type_variable))))))

=========================================
gendecl: operator context
=========================================

a :: a ++ a => a

---

(module
 (decl_sig
  name: (variable)
  (annotation)
  type: (context
   (constraint (type_infix left: (type_name (type_variable)) op: (tyconop (type_operator)) right: (type_name (type_variable))))
   (carrow)
   (type_name (type_variable)))))

=================================================
gendecl: implicit
=================================================

sort :: (?aaa :: a -> a -> a) => [a] -> [a]

---

(module
 (decl_sig
  (variable)
  (annotation)
  (context
   (implicit_param
    (implicit_parid)
    (annotation)
    (fun (type_name (type_variable)) (fun (type_name (type_variable)) (type_name (type_variable)))))
   (carrow)
   (fun
    (list_type (type_name (type_variable)))
    (list_type (type_name (type_variable)))))))


=========================================
gendecl: multi method operator
=========================================

(<), (<=), (>=), (>) :: a

---

(module
 (decl_sig
  (operator)
  (comma)
  (operator)
  (comma)
  (operator)
  (comma)
  (operator)
  (annotation)
  (type_name (type_variable))))


=========================================
gendecl: alternating forall/context/_arrow
=========================================

a :: A a => ∀ a . a ++ a => a -> ∀ a . a -> A => A => A a

---

(module
 (decl_sig
  name: (variable)
  (annotation)
  type: (context
   (constraint class: (class_name (type)) (type_name (type_variable)))
   (carrow)
   (forall
    (quantifiers (type_variable))
    (forall_dot)
    (context
     (constraint (type_infix left: (type_name (type_variable)) op: (tyconop (type_operator)) right: (type_name (type_variable))))
     (carrow)
     (fun
      (type_name (type_variable))
      (forall
       (quantifiers (type_variable))
       (forall_dot)
       (fun
        (type_name (type_variable))
        (context
         (constraint class: (class_name (type)))
         (carrow)
         (context
          (constraint class: (class_name (type)))
          (carrow)
          (type_apply (type_name (type)) (type_name (type_variable)))))))))))))

=================================================
gendecl: parenthesized operator fun
=================================================

(<>) = a

---

(module (decl_fun (funvar (operator)) (funrhs (equals) (exp_name (variable)))))

=================================================
gendecl: HKT annotation
=================================================

a :: (a :: (* -> *) -> *) -> a

---

(module
 (decl_sig
  (variable)
  (annotation)
  (fun
   (type_name
    (annotated_tyvar
     (type_variable)
     (annotation)
     (fun
      (type_parens (fun (star) (star)))
      (star))))
   (type_name (type_variable)))))
