=========================================
gadt: empty
=========================================

data A where

---

(module (adt (type) (where)))

=========================================
gadt: basic
=========================================

data A a where
  A :: A -> !(A a) ->
    A a
  A :: {-# unpack #-} A -> A a

---

(module
 (adt
  (type)
  (tyvar)
  (where)
  (gadt_constr
   (constructor)
   (annotation)
   (fun
    (type_name (type))
    (fun
     (strict_type (type_parens (type_apply (type_name (type)) (type_name (tyvar)))))
     (type_apply (type_name (type)) (type_name (tyvar))))))
  (gadt_constr
   (constructor)
   (annotation)
   (pragma)
   (fun
    (type_name (type))
    (type_apply (type_name (type)) (type_name (tyvar)))))))

=========================================
gadt: record
=========================================

data A where
  A :: { a :: A, a :: !A } -> A

---

(module
 (adt
  (type)
  (where)
  (gadt_constr
   (constructor)
   (annotation)
   (record_fields
    (field (field_id (varid)) (annotation) (type_name (type)))
    (comma)
    (field (field_id (varid)) (annotation) (strict_type (type_name (type)))))
   (type_name (type)))))

=========================================
gadt: signature
=========================================

data A :: [*] -> * where

---

(module
 (adt
  (type)
  (annotation)
  (fun
   (list_type (star))
   (star))
  (where)))

=========================================
gadt: context
=========================================

data A a => A where

---

(module
 (adt
  (context (constraint (class_name (type)) (type_name (tyvar))) (carrow))
  (type)
  (where)))

=========================================
gadt: con context
=========================================

data A where
  A :: A a => A

---

(module
 (adt
  (type)
  (where)
  (gadt_constr
   (constructor)
   (annotation)
   (context
    (constraint (class_name (type)) (type_name (tyvar)))
    (carrow))
   (type_name (type)))))

=========================================
gadt: forall
=========================================

data A where
  A :: âˆ€ a . A

---

(module
 (adt
  (type)
  (where)
  (gadt_constr
   (constructor)
   (annotation)
   (forall (tyvar) (forall_dot))
   (type_name (type)))))

=========================================
gadt: deriving
=========================================

data A where
  A :: A
  deriving A

---

(module
 (adt
  (type)
  (where)
  (gadt_constr (constructor) (annotation) (type_name (type)))
  (deriving (type))))

=========================================
gadt: symbolic
=========================================

data a +++ b where
  (:+++) :: a -> b -> a +++ b

---

(module
 (adt
  (type_infix (tyvar) (type_operator) (tyvar))
  (where)
  (gadt_constr
   (consym)
   (annotation)
   (fun
    (type_name (tyvar))
    (fun
     (type_name (tyvar))
     (type_infix
      (type_name (tyvar))
      (tyconop (type_operator))
      (type_name (tyvar))))))))
