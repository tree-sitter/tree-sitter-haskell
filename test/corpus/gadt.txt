=========================================
gadt: empty
=========================================

data A where

---

(module (decl_adt (tyconid (conid)) (where)))

=========================================
gadt: basic
=========================================

data A a where
  A :: A -> !(A a) ->
    A a
  A :: {-# unpack #-} A -> A a

---

(module
 (decl_adt
  (tyconid (conid))
  (tyvar)
  (where)
  (gadt_constr
   (conid)
   (annotation)
   (fun
    (type_name (tyconid (conid)))
    (arrow)
    (fun
     (strict_type (type_parens (type_apply (type_name (tyconid (conid))) (type_name (tyvar)))))
     (arrow)
     (type_apply (type_name (tyconid (conid))) (type_name (tyvar))))))
  (gadt_constr
   (conid)
   (annotation)
   (pragma)
   (fun
    (type_name (tyconid (conid)))
    (arrow)
    (type_apply (type_name (tyconid (conid))) (type_name (tyvar)))))))

=========================================
gadt: record
=========================================

data A where
  A :: { a :: A, a :: !A } -> A

---

(module
 (decl_adt
  (tyconid (conid))
  (where)
  (gadt_constr
   (conid)
   (annotation)
   (record_fields
    (field (field_id (varid)) (annotation) (type_name (tyconid (conid))))
    (comma)
    (field (field_id (varid)) (annotation) (strict_type (type_name (tyconid (conid))))))
   (arrow)
   (type_name (tyconid (conid))))))

=========================================
gadt: signature
=========================================

data A :: [*] -> * where

---

(module
 (decl_adt
  (tyconid (conid))
  (annotation)
  (fun
   (list_type (star)) (arrow)
   (star))
  (where)))

=========================================
gadt: context
=========================================

data A a => A where

---

(module
 (decl_adt
  (context (constraint (class_name (tyconid (conid))) (type_name (tyvar))) (carrow))
  (tyconid (conid))
  (where)))

=========================================
gadt: con context
=========================================

data A where
  A :: A a => A

---

(module
 (decl_adt
  (tyconid (conid))
  (where)
  (gadt_constr
   (conid)
   (annotation)
   (context
    (constraint (class_name (tyconid (conid))) (type_name (tyvar)))
    (carrow))
   (type_name (tyconid (conid))))))

=========================================
gadt: forall
=========================================

data A where
  A :: âˆ€ a . A

---

(module
 (decl_adt
  (tyconid (conid))
  (where)
  (gadt_constr
   (conid)
   (annotation)
   (forall (tyvar) (forall_dot))
   (type_name (tyconid (conid))))))

=========================================
gadt: deriving
=========================================

data A where
  A :: A
  deriving A

---

(module
 (decl_adt
  (tyconid (conid))
  (where)
  (gadt_constr (conid) (annotation) (type_name (tyconid (conid))))
  (deriving (tyconid (conid)))))

=========================================
gadt: symbolic
=========================================

data a +++ b where
  (:+++) :: a -> b -> a +++ b

---

(module
 (decl_adt
  (type_infix (tyvar) (tyconsym) (tyvar))
  (where)
  (gadt_constr
   (consym)
   (annotation)
   (fun
    (type_name (tyvar))
    (arrow)
    (fun
     (type_name (tyvar))
     (arrow)
     (type_infix
      (type_name (tyvar))
      (tyconop (tyconsym))
      (type_name (tyvar))))))))
