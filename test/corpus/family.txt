=================================================
family: closed, nullary
=================================================

type family A where
  A = A

---

(module
 (type_family
  (tyfam_head (type))
  (where)
  (tyfam_eq
   (tyfam_pat (type))
   (equals)
   (type_name (type)))))

=================================================
family: closed, tyvars
=================================================

type family A a b c where
  A a b c = b c

---

(module
 (type_family
  (tyfam_head name: (type) (type_variable) (type_variable) (type_variable))
  (where)
  (tyfam_eq
   (tyfam_pat name: (type) (type_name (type_variable)) (type_name (type_variable)) (type_name (type_variable)))
   (equals)
   (type_apply (type_name (type_variable)) (type_name (type_variable))))))

=================================================
family: closed, pattern matching
=================================================

type family A a b c where
  A (Maybe a) [c] = a (Maybe c)

---

(module
 (type_family
  (tyfam_head (type) (type_variable) (type_variable) (type_variable))
  (where)
  (tyfam_eq
   (tyfam_pat
    (type)
    (type_parens (type_apply (type_name (type)) (type_name (type_variable))))
    (list_type (type_name (type_variable))))
   (equals)
   (type_apply (type_name (type_variable)) (type_parens (type_apply (type_name (type)) (type_name (type_variable))))))))

=================================================
family: closed, signature
=================================================

type family A a :: (k -> *) -> 'Just k where
  A a = a

---

(module
 (type_family
  (tyfam_head (type) (type_variable))
  (tyfam_sig
   (annotation)
   (fun
    (type_parens (fun (type_name (type_variable)) (star)))
    (type_apply (type_name (promoted (type))) (type_name (type_variable)))))
(where)
  (tyfam_eq
   (tyfam_pat (type) (type_name (type_variable)))
   (equals)
   (type_name (type_variable)))))

=================================================
family: closed, type_variable kind
=================================================

type family A (a :: ([k] -> *) -> k) where
  A a = a

---

(module
 (type_family
  (tyfam_head
   (type)
   (annotated_tyvar
    (type_variable)
    (annotation)
    (fun
     (type_parens (fun (list_type (type_name (type_variable))) (star)))
     (type_name (type_variable)))))
  (where)
  (tyfam_eq (tyfam_pat (type) (type_name (type_variable))) (equals) (type_name (type_variable)))))

=================================================
family: open
=================================================

type family A (a :: a) :: *
type instance A [A] = A
type instance A (A A) = A

---

(module
 (type_family
  (tyfam_head
   (type)
   (annotated_tyvar (type_variable) (annotation) (type_name (type_variable))))
  (tyfam_sig
   (annotation)
   (star)))
 (type_instance
  (type_name (type))
  (list_type (type_name (type)))
  (equals)
  (type_name (type)))
 (type_instance
  (type_name (type))
  (type_parens
   (type_apply
    (type_name (type))
    (type_name (type))))
  (equals)
  (type_name (type))))

=================================================
family: data family
=================================================

data family A a (a :: [a]) :: Type -> *

---

(module
 (data_family
  (type)
  (type_variable)
  (annotated_tyvar (type_variable) (annotation) (list_type (type_name (type_variable))))
  (annotation)
  (fun (type_name (type)) (star))))

=================================================
family: data instance adt
=================================================

data instance âˆ€ a . A a A =
  A a A a
  |
  A { a :: A }

---

(module
 (data_instance
  (forall (type_variable) (forall_dot))
  (type_apply
   (type_name (type))
   (type_name (type_variable))
   (type_name (type)))
  (equals)
  (constrs
   (data_constructor (constructor) (type_name (type_variable)) (type_name (type)) (type_name (type_variable)))
   (bar)
   (constr_record
    (constructor)
    (record_fields (field (field_id (variable)) (annotation) (type_name (type))))))))

=================================================
family: data instance gadt
=================================================

data instance A a where
  A :: A -> A a
  deriving (A, A)

---

(module
 (data_instance
  (type_apply
   (type_name (type))
   (type_name (type_variable)))
  (where)
  (gadt_constr
   (constructor)
   (annotation)
   (fun (type_name (type)) (type_apply (type_name (type)) (type_name (type_variable)))))
  (deriving (type) (comma) (type))))

=================================================
family: data instance newtype
=================================================

newtype instance A a a = A a deriving A

---

(module
 (data_instance
  (type_apply
   (type_name (type))
   (type_name (type_variable))
   (type_name (type_variable)))
  (equals)
  (newtype_constructor (constructor) (type_name (type_variable)))
  (deriving (type))))
