=================================================
pat: basic
=================================================

a a (a:a : as) (a, a, (a, [a])) = a

---

(module
 (decl_fun
  (funvar
   (varid)
   (pat_name (varid))
   (pat_parens
    (pat_infix
     (pat_name (varid))
     (consym)
     (pat_infix (pat_name (varid)) (consym) (pat_name (varid)))))
   (pat_tuple
    (pat_name (varid))
    (comma)
    (pat_name (varid))
    (comma)
    (pat_tuple (pat_name (varid)) (comma) (pat_list (pat_name (varid))))))
  (funrhs (equals) (exp_name (varid)))))

=================================================
pat: con
=================================================

a A = a
a (A a) = a

---

(module
 (decl_fun (funvar (varid) (pat_name (constructor))) (funrhs (equals) (exp_name (varid))))
 (decl_fun
  (funvar (varid)
   (pat_parens (pat_apply (pat_name (constructor)) (pat_name (varid)))))
  (funrhs (equals) (exp_name (varid)))))

=================================================
pat: consym
=================================================

a (a :++ a) = a

---

(module
 (decl_fun
  (funvar
   (varid)
   (pat_parens (pat_infix (pat_name (varid)) (consym) (pat_name (varid)))))
  (funrhs (equals) (exp_name (varid)))))

=================================================
pat: as
=================================================

a a@(A a) a@(A a) = a

---

(module
 (decl_fun
  (funvar
   (varid)
   (pat_as (varid) (as_pat) (pat_parens (pat_apply (pat_name (constructor)) (pat_name (varid)))))
   (pat_as (varid) (as_pat) (pat_parens (pat_apply (pat_name (constructor)) (pat_name (varid))))))
  (funrhs (equals) (exp_name (varid)))))

=================================================
pat: wildcard
=================================================

a (A _) _ = a

---

(module
 (decl_fun
  (funvar
   (varid)
   (pat_parens (pat_apply (pat_name (constructor)) (pat_wildcard)))
   (pat_wildcard))
  (funrhs (equals) (exp_name (varid)))))

=================================================
pat: literal
=================================================

a 1 2 = 3
a "a" "a" = a
a 'a' 'b' = a
a 1.0 2.0 = 3.0

---

(module
 (decl_fun (funvar (varid) (pat_literal (integer)) (pat_literal (integer))) (funrhs (equals) (exp_literal (integer))))
 (decl_fun (funvar (varid) (pat_literal (string)) (pat_literal (string))) (funrhs (equals) (exp_name (varid))))
 (decl_fun (funvar (varid) (pat_literal (char)) (pat_literal (char))) (funrhs (equals) (exp_name (varid))))
 (decl_fun (funvar (varid) (pat_literal (float)) (pat_literal (float))) (funrhs (equals) (exp_literal (float)))))

=================================================
pat: record
=================================================

f A {} = a
f A {..} = a
f a@A { a = a, b = a, a, .. } = a

---

(module
 (decl_fun (funvar (varid) (pat_name (constructor)) (pat_record)) (funrhs (equals) (exp_name (varid))))
 (decl_fun
  (funvar
   (varid)
   (pat_name (constructor))
   (pat_record (fpat (wildcard)))) (funrhs (equals) (exp_name (varid))))
 (decl_fun
  (funvar
   (varid)
   (pat_as
    (varid)
    (as_pat)
    (pat_name (constructor))
    (pat_record
     (fpat (varid) (equals) (pat_name (varid)))
     (comma)
     (fpat (varid) (equals) (pat_name (varid)))
     (comma)
     (fpat (varid)) (comma) (fpat (wildcard)))))
  (funrhs (equals) (exp_name (varid)))))

=================================================
pat: irrefutable
=================================================

a ~a = a
a ~(~a) = a
a ~(~(a, a), a) = a

---

(module
 (decl_fun
  (funvar (varid) (pat_irrefutable (pat_name (varid)))) (funrhs (equals) (exp_name (varid))))
 (decl_fun
  (funvar (varid) (pat_irrefutable (pat_parens (pat_irrefutable (pat_name (varid))))))
  (funrhs (equals) (exp_name (varid))))
 (decl_fun
  (funvar
   (varid)
   (pat_irrefutable
    (pat_tuple
     (pat_irrefutable (pat_tuple (pat_name (varid)) (comma) (pat_name (varid))))
     (comma)
     (pat_name (varid)))))
  (funrhs (equals) (exp_name (varid)))))

=================================================
pat: view pattern in funvar
=================================================

a (a a -> Aa a a) = a
a (a -> a, a -> a) = a

---

(module
 (decl_fun
  (funvar (varid)
   (pat_parens
    (pat_view
     (exp_apply (exp_name (varid)) (exp_name (varid)))
     (pat_apply (pat_name (constructor)) (pat_name (varid)) (pat_name (varid))))))
  (funrhs (equals) (exp_name (varid))))
  (decl_fun
   (funvar (varid)
    (pat_tuple
     (pat_view (exp_name (varid)) (pat_name (varid)))
     (comma)
     (pat_view (exp_name (varid)) (pat_name (varid)))))
   (funrhs (equals) (exp_name (varid)))))

=================================================
pat: view pattern in lambda
=================================================

a = \ (a -> a) -> a

---

(module
 (decl_fun
  (funvar (varid))
  (funrhs
   (equals)
   (exp_lambda
    (lambda)
    (pat_parens (pat_view (exp_name (varid)) (pat_name (varid))))
    (exp_name (varid))))))

=================================================
pat: annotation
=================================================

a (a :: A a) = a

---

(module
 (decl_fun
  (funvar
   (varid)
   (pat_parens (pat_name (varid)) (annotation) (type_apply (type_name (type)) (type_name (tyvar)))))
  (funrhs (equals) (exp_name (varid)))))

=================================================
pat: infix pattern in decl lhs
=================================================

A a == A a = a == a

---

(module
 (decl_fun
  (funpat
   (infix
    lhs: (pat_apply (pat_name (constructor)) (pat_name (varid)))
    op: (varop (varsym))
    rhs: (pat_apply (pat_name (constructor)) (pat_name (varid)))))
  (funrhs
   (equals)
   (exp_infix (exp_name (varid)) (qvarop (varsym)) (exp_name (varid))))))

=================================================
pat: infix pattern varid
=================================================

a |> a = a

---

(module
 (decl_fun
  (funpat (infix (pat_name (varid)) (varop (varsym)) (pat_name (varid))))
  (funrhs (equals) (exp_name (varid)))))

=================================================
pat: tuple funpat
=================================================

(a, a) = a

---

(module (decl_fun (funpat (pat_tuple (pat_name (varid)) (comma) (pat_name (varid)))) (funrhs (equals) (exp_name (varid)))))

=================================================
pat: con application funpat
=================================================

A a = a

---

(module (decl_fun (funpat (pat_apply (pat_name (constructor)) (pat_name (varid)))) (funrhs (equals) (exp_name (varid)))))

=================================================
pat: parens con application funpat
=================================================

(A a) = a

---

(module
 (decl_fun
  (funpat (pat_parens (pat_apply (pat_name (constructor)) (pat_name (varid)))))
  (funrhs (equals) (exp_name (varid)))))

=========================================
pat: parenthesized record
=========================================

a (A{}) = a


---

(module
 (decl_fun
  (funvar (varid) (pat_parens (pat_name (constructor)) (pat_record)))
  (funrhs (equals) (exp_name (varid)))))

=================================================
pat: guards
=================================================

a a | a < 1, a > 1 = A
    | A (A A {..} _) : a <- a = A
    | otherwise = A

---

(module
 (decl_fun
  (funvar name: (varid) (pat_name (varid)))
  (funrhs
   (gdrhs
    (guards
     (guard (exp_infix (exp_name (varid)) (qvarop (varsym)) (exp_literal (integer))))
     (comma)
     (guard (exp_infix (exp_name (varid)) (qvarop (varsym)) (exp_literal (integer)))))
    (equals)
    (exp_name (constructor)))
   (gdrhs
    (guards
     (guard
      (pattern_guard
       (pat_infix
        (pat_apply
         (pat_name (constructor))
         (pat_parens
          (pat_apply (pat_name (constructor)) (pat_name (constructor)) (pat_record (fpat (wildcard))) (pat_wildcard))))
        (consym)
        (pat_name (varid)))
       (larrow)
       (exp_name (varid)))))
    (equals)
    (exp_name (constructor)))
    (gdrhs
    (guards (guard (exp_name (varid))))
    (equals)
    (exp_name (constructor))))))
