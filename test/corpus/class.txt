=========================================
class: minimal
=========================================

class A a

---

(module (class (class_head class: (class_name (type)) (type_name (tyvar)))))

=========================================
class: context variants
=========================================

class A a => Read a
class (A a, A a) => A a

---

(module
 (class
  (context
   (constraint (class_name (type)) (type_name (tyvar)))
   (carrow))
  (class_head (class_name (type)) (type_name (tyvar))))
 (class
  (context
   (constraint (class_name (type)) (type_name (tyvar)))
   (comma)
   (constraint (class_name (type)) (type_name (tyvar)))
   (carrow))
  (class_head (class_name (type)) (type_name (tyvar)))))

=========================================
class: method with context
=========================================

class A a where a :: A a => a -> a

---

(module
 (class
  (class_head class: (class_name (type)) (type_name (tyvar)))
  (class_body
   (where)
   (decl_sig
    name: (variable)
    (annotation)
    type: (context
     (constraint class: (class_name (type)) (type_name (tyvar)))
     (carrow)
     (fun (type_name (tyvar)) (type_name (tyvar))))))))

=========================================
class: braces
=========================================

class Foo a where {
  a :: a;
  a :: a;
}

---

(module
 (class
  (class_head (class_name (type)) (type_name (tyvar)))
  (class_body
   (where)
   (decl_sig (variable) (annotation) (type_name (tyvar)))
   (decl_sig (variable) (annotation) (type_name (tyvar))))))

=========================================
class: fixity
=========================================

class A where
  infixl `op`
  a :: Int
  infixr 7 `op`
  a = a
  infix 7 `op`, `ip`, `ap`
  infix <$>
  infix 7 <$>
  infix 7 :
  infix 7 :.
  infix 7 :<:

---

(module
 (class
  (class_head (class_name (type)))
  (class_body
   (where)
   (decl_fixity (varop (variable)))
   (decl_sig (variable) (annotation) (type_name (type)))
   (decl_fixity (integer) (varop (variable)))
   (decl_fun (funvar (variable)) (funrhs (equals) (exp_name (variable))))
   (decl_fixity (integer) (varop (variable)) (comma) (varop (variable)) (comma) (varop (variable)))
   (decl_fixity (varop (operator)))
   (decl_fixity (integer) (varop (operator)))
   (decl_fixity (integer) (consym))
   (decl_fixity (integer) (consym))
   (decl_fixity (integer) (consym)))))

=========================================
class: multi method operator
=========================================

class A where
  (<), (<=), (>=), (>) :: a

---

(module
 (class
  (class_head (class_name (type)))
  (class_body
   (where)
   (decl_sig
    (operator)
    (comma)
    (operator)
    (comma)
    (operator)
    (comma)
    (operator)
    (annotation)
    (type_name (tyvar))))))

=========================================
class: multi param
=========================================

class A a a a

---

(module (class (class_head (class_name (type)) (type_name (tyvar)) (type_name (tyvar)) (type_name (tyvar)))))

=========================================
class: default signature
=========================================

class A where
  a :: Int
  default a :: Int

---

(module
 (class
  (class_head (class_name (type)))
  (class_body
   (where)
   (decl_sig (variable) (annotation) (type_name (type)))
   (default_signature (decl_sig (variable) (annotation) (type_name (type)))))))

=========================================
class: tyvar kind
=========================================

class A (a :: [*] -> k)

---

(module
 (class
  (class_head
   (class_name (type))
   (type_name
    (annotated_tyvar
     (tyvar)
     (annotation)
     (fun (list_type (star)) (type_name (tyvar))))))))

=========================================
class: associated family
=========================================

class A a where
  type A a :: a
  type family A a :: a

---

(module
 (class
  (class_head (class_name (type)) (type_name (tyvar)))
  (class_body
   (where)
   (decl_type_sig (type) (tyvar) (annotation) (type_name (tyvar)))
   (decl_type_sig (type) (tyvar) (annotation) (type_name (tyvar))))))

=========================================
class: associated data
=========================================

class A a where
  data A a
  data family A a :: * -> Type

---

(module
 (class
  (class_head (class_name (type)) (type_name (tyvar)))
  (class_body
   (where)
   (class_datafam (type) (tyvar))
   (class_datafam
    (type)
    (tyvar)
    (annotation)
    (fun (star) (type_name (type)))))))

=========================================
class: fundeps
=========================================

class A | a -> a a, a a -> a

---

(module
 (class
  (class_head class: (class_name (type)))
  (fundeps
   (fundep (tyvar) (tyvar) (tyvar))
   (comma)
   (fundep (tyvar) (tyvar) (tyvar)))))

=========================================
class: infix operator name
=========================================

class a ++ b

---

(module
 (class
  (class_head
   (type_infix
    left: (type_name (tyvar))
    op: (tyconop (type_operator))
    right: (type_name (tyvar))))))
