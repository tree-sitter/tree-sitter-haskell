=================================================
operator: error: |
=================================================

f = a | a

---

(module (decl_fun (funvar (variable)) (funrhs (equals) (exp_apply (exp_name (variable)) (ERROR) (exp_name (variable))))))

=================================================
operator: error: lambda
=================================================

f = a \\ a
f = a \ a

---

(module
 (decl_fun
  (funvar (variable))
  (funrhs (equals) (exp_infix (exp_name (variable)) (qvarop (operator)) (exp_name (variable)))))
 (decl_fun
  (funvar (variable))
  (funrhs (equals) (exp_name (variable)))) (ERROR (lambda) (variable)))

=================================================
operator: error: ..
=================================================

f = a .. a
f = a ... a
f = a . a

---

(module
  (decl_fun (funvar (variable)) (funrhs (equals) (exp_apply (exp_name (variable)) (ERROR) (exp_name (variable)))))
  (decl_fun (funvar (variable)) (funrhs (equals) (exp_infix (exp_name (variable)) (qvarop (operator)) (exp_name (variable)))))
  (decl_fun (funvar (variable)) (funrhs (equals) (exp_infix (exp_name (variable)) (qvarop (operator)) (exp_name (variable)))))
)

=================================================
operator: error: _arrow
=================================================

f = a -> a
f = a |> a

---

(module
 (decl_fun
  (funvar (variable))
  (funrhs
   (equals)
   (exp_apply (exp_name (variable)) (ERROR) (exp_name (variable)))))
 (decl_fun
  (funvar (variable))
  (funrhs
   (equals)
   (exp_infix (exp_name (variable)) (qvarop (operator)) (exp_name (variable))))))

=================================================
operator: error: carrow
=================================================

f = a => a
f = a =>> a

---

(module
  (decl_fun (funvar (variable)) (funrhs (equals) (exp_apply (exp_name (variable)) (ERROR (carrow)) (exp_name (variable)))))
  (decl_fun (funvar (variable)) (funrhs (equals) (exp_infix (exp_name (variable)) (qvarop (operator)) (exp_name (variable)))))
)

=================================================
operator: error: larrow
=================================================

f = a < a
f = a <- a
f = a <-- a

---

(module
  (decl_fun (funvar (variable)) (funrhs (equals) (exp_infix (exp_name (variable)) (qvarop (operator)) (exp_name (variable)))))
  (decl_fun (funvar (variable)) (funrhs (equals) (exp_apply (exp_name (variable)) (ERROR (larrow)) (exp_name (variable)))))
  (decl_fun (funvar (variable)) (funrhs (equals) (exp_infix (exp_name (variable)) (qvarop (operator)) (exp_name (variable)))))
)

=================================================
operator: error: @
=================================================

f = a @ a
f = a @@ a

---

(module
  (decl_fun (funvar (variable)) (funrhs (equals) (exp_apply (exp_name (variable)) (exp_tyapp (tyapp) (type_name (tyvar))))))
  (decl_fun (funvar (variable)) (funrhs (equals) (exp_infix (exp_name (variable)) (qvarop (operator)) (exp_name (variable)))))
)

=================================================
operator: error: ~
=================================================

f = a ~ a
f = a ~~ a

---

(module
  (decl_fun (funvar (variable)) (funrhs (equals) (exp_apply (exp_name (variable)) (ERROR) (exp_name (variable)))))
  (decl_fun (funvar (variable)) (funrhs (equals) (exp_infix (exp_name (variable)) (qvarop (operator)) (exp_name (variable)))))
)

=================================================
operator: error: equals
=================================================

f = a = a
f = a == a

---

(module
  (decl_fun (funvar (variable)) (funrhs (equals) (exp_apply (exp_name (variable)) (ERROR) (exp_name (variable)))))
  (decl_fun (funvar (variable)) (funrhs (equals) (exp_infix (exp_name (variable)) (qvarop (operator)) (exp_name (variable)))))
)

=================================================
operator: error: leading :
=================================================

f = a :+ a
f = a +: a

---

(module
  (decl_fun (funvar (variable)) (funrhs (equals) (exp_infix (exp_name (variable)) (consym) (exp_name (variable)))))
  (decl_fun (funvar (variable)) (funrhs (equals) (exp_infix (exp_name (variable)) (qvarop (operator)) (exp_name (variable)))))
)

=================================================
operator: dollar
=================================================

f = a $ a

---

(module (decl_fun (funvar (variable)) (funrhs (equals) (exp_infix (exp_name (variable)) (qvarop (operator)) (exp_name (variable))))))

=================================================
operator: two-symbol dollar operator
=================================================

a = a $! a

---

(module (decl_fun (funvar (variable)) (funrhs (equals) (exp_infix (exp_name (variable)) (qvarop (operator)) (exp_name (variable))))))

=================================================
operator: comment with more than two dashes
=================================================

a --- a
a ----- a

---

(module (top_splice (exp_name (variable))) (comment) (top_splice (exp_name (variable))) (comment))

=================================================
operator: operator with large number of dashes
=================================================

a = a ------> a ----- %

---

(module
 (decl_fun
  (funvar (variable))
  (funrhs (equals) (exp_infix (exp_name (variable)) (qvarop (operator)) (exp_name (variable)))))
 (comment))

=================================================
operator: implicit parameter
=================================================

a = ?a
(?) = a
a = a ? a

---

(module
 (decl_fun
  (funvar (variable))
  (funrhs (equals) (exp_name (implicit_parid))))
 (decl_fun
  (funvar (operator))
  (funrhs (equals) (exp_name (variable))))
 (decl_fun
  (funvar (variable))
  (funrhs
   (equals)
   (exp_infix (exp_name (variable)) (qvarop (operator)) (exp_name (variable))))))

=================================================
operator: dollar terminated by opening bracket
=================================================

a = a $[a]

---

(module
 (decl_fun
  (funvar (variable))
  (funrhs
   (equals)
   (exp_infix (exp_name (variable)) (qvarop (operator)) (exp_list (exp_name (variable)))))))

=================================================
operator: bang as operator decl
=================================================

(!) :: A
(!) = a

---

(module
 (decl_sig (operator) (annotation) (type_name (type)))
 (decl_fun (funvar (operator)) (funrhs (equals) (exp_name (variable)))))
